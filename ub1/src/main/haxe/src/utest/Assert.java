// Generated by Haxe 4.1.5
package utest;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Assert extends haxe.lang.HxObject
{
	static
	{
		//line 730 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		utest.Assert.createAsync = ( (( utest.Assert_Anon_730__Fun.__hx_current != null )) ? (utest.Assert_Anon_730__Fun.__hx_current) : (utest.Assert_Anon_730__Fun.__hx_current = ((utest.Assert_Anon_730__Fun) (new utest.Assert_Anon_730__Fun()) )) );
		//line 742 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		utest.Assert.createEvent = ( (( utest.Assert_Anon_742__Fun.__hx_current != null )) ? (utest.Assert_Anon_742__Fun.__hx_current) : (utest.Assert_Anon_742__Fun.__hx_current = ((utest.Assert_Anon_742__Fun) (new utest.Assert_Anon_742__Fun()) )) );
	}
	
	public Assert(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Assert()
	{
		//line 22 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		utest.Assert.__hx_ctor_utest_Assert(this);
	}
	
	
	protected static void __hx_ctor_utest_Assert(utest.Assert __hx_this)
	{
	}
	
	
	public static haxe.ds.List<utest.Assertation> results;
	
	public static boolean processResult(boolean cond, haxe.lang.Function getMessage, java.lang.Object pos)
	{
		//line 30 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( utest.Assert.results == null )) 
		{
			//line 31 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( ( ( ( "Assert at " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(pos, "fileName", true)) ) + ":" ) + ((int) (haxe.lang.Runtime.getField_f(pos, "lineNumber", true)) ) ) + " out of context. Most likely you are trying to assert after a test timeout." ))) );
		}
		
		//line 33 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (cond) 
		{
			//line 34 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Success(pos));
		}
		else
		{
			//line 39 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Failure(haxe.lang.Runtime.toString(getMessage.__hx_invoke0_o()), pos));
		}
		
		//line 42 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return cond;
	}
	
	
	public static boolean isTrue(boolean cond, java.lang.String msg, java.lang.Object pos)
	{
		//line 53 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( utest.Assert.results == null )) 
		{
			//line 53 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( ( ( ( "Assert at " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(pos, "fileName", true)) ) + ":" ) + ((int) (haxe.lang.Runtime.getField_f(pos, "lineNumber", true)) ) ) + " out of context. Most likely you are trying to assert after a test timeout." ))) );
		}
		
		//line 53 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (cond) 
		{
			//line 53 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Success(pos));
		}
		else
		{
			//line 53 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Failure(( (( msg != null )) ? (msg) : ("expected true") ), pos));
		}
		
		//line 53 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return cond;
	}
	
	
	public static boolean isFalse(boolean value, java.lang.String msg, java.lang.Object pos)
	{
		//line 64 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		boolean cond = ( value == false );
		//line 64 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( utest.Assert.results == null )) 
		{
			//line 64 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( ( ( ( "Assert at " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(pos, "fileName", true)) ) + ":" ) + ((int) (haxe.lang.Runtime.getField_f(pos, "lineNumber", true)) ) ) + " out of context. Most likely you are trying to assert after a test timeout." ))) );
		}
		
		//line 64 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (cond) 
		{
			//line 64 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Success(pos));
		}
		else
		{
			//line 64 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Failure(( (( msg != null )) ? (msg) : ("expected false") ), pos));
		}
		
		//line 64 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return cond;
	}
	
	
	public static boolean isNull(java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 75 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		boolean cond = ( value == null );
		//line 75 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( utest.Assert.results == null )) 
		{
			//line 75 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( ( ( ( "Assert at " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(pos, "fileName", true)) ) + ":" ) + ((int) (haxe.lang.Runtime.getField_f(pos, "lineNumber", true)) ) ) + " out of context. Most likely you are trying to assert after a test timeout." ))) );
		}
		
		//line 75 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (cond) 
		{
			//line 75 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Success(pos));
		}
		else
		{
			//line 75 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Failure(( (( msg != null )) ? (msg) : (( "expected null but it is " + utest.Assert.q(value) )) ), pos));
		}
		
		//line 75 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return cond;
	}
	
	
	public static boolean notNull(java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 86 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		boolean cond = ( ! (( value == null )) );
		//line 86 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( utest.Assert.results == null )) 
		{
			//line 86 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( ( ( ( "Assert at " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(pos, "fileName", true)) ) + ":" ) + ((int) (haxe.lang.Runtime.getField_f(pos, "lineNumber", true)) ) ) + " out of context. Most likely you are trying to assert after a test timeout." ))) );
		}
		
		//line 86 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (cond) 
		{
			//line 86 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Success(pos));
		}
		else
		{
			//line 86 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Failure(( (( msg != null )) ? (msg) : ("expected not null") ), pos));
		}
		
		//line 86 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return cond;
	}
	
	
	public static boolean is(java.lang.Object value, java.lang.Object type, java.lang.String msg, java.lang.Object pos)
	{
		//line 99 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return utest.Assert.isOfType(value, type, msg, pos);
	}
	
	
	public static boolean isOfType(java.lang.Object value, java.lang.Object type, java.lang.String msg, java.lang.Object pos)
	{
		//line 111 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		boolean cond = haxe.root.Std.isOfType(value, type);
		//line 111 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( utest.Assert.results == null )) 
		{
			//line 111 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( ( ( ( "Assert at " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(pos, "fileName", true)) ) + ":" ) + ((int) (haxe.lang.Runtime.getField_f(pos, "lineNumber", true)) ) ) + " out of context. Most likely you are trying to assert after a test timeout." ))) );
		}
		
		//line 111 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (cond) 
		{
			//line 111 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Success(pos));
		}
		else
		{
			//line 111 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Failure(( (( msg != null )) ? (msg) : (( ( ( "expected type " + utest.Assert.typeToString(type) ) + " but it is " ) + utest.Assert.typeToString(value) )) ), pos));
		}
		
		//line 111 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return cond;
	}
	
	
	public static boolean notEquals(java.lang.Object expected, java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 126 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		boolean cond = ( ! (haxe.lang.Runtime.eq(expected, value)) );
		//line 126 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( utest.Assert.results == null )) 
		{
			//line 126 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( ( ( ( "Assert at " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(pos, "fileName", true)) ) + ":" ) + ((int) (haxe.lang.Runtime.getField_f(pos, "lineNumber", true)) ) ) + " out of context. Most likely you are trying to assert after a test timeout." ))) );
		}
		
		//line 126 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (cond) 
		{
			//line 126 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Success(pos));
		}
		else
		{
			//line 126 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Failure(( (( msg != null )) ? (msg) : (( ( ( ( "expected " + utest.Assert.q(expected) ) + " and test value " ) + utest.Assert.q(value) ) + " should be different" )) ), pos));
		}
		
		//line 126 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return cond;
	}
	
	
	public static boolean equals(java.lang.Object expected, java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 141 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		boolean cond = haxe.lang.Runtime.eq(expected, value);
		//line 141 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( utest.Assert.results == null )) 
		{
			//line 141 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( ( ( ( "Assert at " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(pos, "fileName", true)) ) + ":" ) + ((int) (haxe.lang.Runtime.getField_f(pos, "lineNumber", true)) ) ) + " out of context. Most likely you are trying to assert after a test timeout." ))) );
		}
		
		//line 141 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (cond) 
		{
			//line 141 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Success(pos));
		}
		else
		{
			//line 141 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Failure(( (( msg != null )) ? (msg) : (( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) )) ), pos));
		}
		
		//line 141 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return cond;
	}
	
	
	public static boolean match(haxe.root.EReg pattern, java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 156 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		boolean cond = pattern.match(haxe.lang.Runtime.toString(value));
		//line 156 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( utest.Assert.results == null )) 
		{
			//line 156 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( ( ( ( "Assert at " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(pos, "fileName", true)) ) + ":" ) + ((int) (haxe.lang.Runtime.getField_f(pos, "lineNumber", true)) ) ) + " out of context. Most likely you are trying to assert after a test timeout." ))) );
		}
		
		//line 156 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (cond) 
		{
			//line 156 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Success(pos));
		}
		else
		{
			//line 156 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Failure(( (( msg != null )) ? (msg) : (( ( "the value " + utest.Assert.q(value) ) + " does not match the provided pattern" )) ), pos));
		}
		
		//line 156 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return cond;
	}
	
	
	public static boolean floatEquals(double expected, double value, java.lang.Object approx, java.lang.String msg, java.lang.Object pos)
	{
		//line 173 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		boolean cond = utest.Assert._floatEquals(expected, value, approx);
		//line 173 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( utest.Assert.results == null )) 
		{
			//line 173 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( ( ( ( "Assert at " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(pos, "fileName", true)) ) + ":" ) + ((int) (haxe.lang.Runtime.getField_f(pos, "lineNumber", true)) ) ) + " out of context. Most likely you are trying to assert after a test timeout." ))) );
		}
		
		//line 173 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (cond) 
		{
			//line 173 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Success(pos));
		}
		else
		{
			//line 173 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Failure(( (( msg != null )) ? (msg) : (( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) )) ), pos));
		}
		
		//line 173 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return cond;
	}
	
	
	public static boolean _floatEquals(double expected, double value, java.lang.Object approx)
	{
		//line 178 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (java.lang.Double.isNaN(expected)) 
		{
			//line 179 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return java.lang.Double.isNaN(value);
		}
		else
		{
			//line 180 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			if (java.lang.Double.isNaN(value)) 
			{
				//line 181 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return false;
			}
			else
			{
				//line 182 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if ((  ! (haxe.lang.Runtime.isFinite(expected))  &&  ! (haxe.lang.Runtime.isFinite(value))  )) 
				{
					//line 183 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return ( ( expected > 0 ) == ( value > 0 ) );
				}
				
			}
			
		}
		
		//line 184 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (haxe.lang.Runtime.eq(null, approx)) 
		{
			//line 185 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			approx = 1e-5;
		}
		
		//line 186 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return ( java.lang.Math.abs(( value - expected )) <= ((double) (haxe.lang.Runtime.toDouble(approx)) ) );
	}
	
	
	public static java.lang.String getTypeName(java.lang.Object v)
	{
		//line 190 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		haxe.root.ValueType _g = haxe.root.Type.typeof(v);
		//line 190 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		switch (_g.index)
		{
			case 0:
			{
				//line 192 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return "`null`";
			}
			
			
			case 1:
			{
				//line 193 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return "Int";
			}
			
			
			case 2:
			{
				//line 194 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return "Float";
			}
			
			
			case 3:
			{
				//line 195 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return "Bool";
			}
			
			
			case 4:
			{
				//line 199 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return "Object";
			}
			
			
			case 5:
			{
				//line 196 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return "function";
			}
			
			
			case 6:
			{
				//line 197 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				java.lang.Class c = ((java.lang.Class) (_g.params[0]) );
				//line 197 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return haxe.root.Type.getClassName(c);
			}
			
			
			case 7:
			{
				//line 198 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				java.lang.Class e = ((java.lang.Class) (_g.params[0]) );
				//line 198 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return haxe.root.Type.getEnumName(e);
			}
			
			
			case 8:
			{
				//line 200 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return "`Unknown`";
			}
			
			
		}
		
		//line 189 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return null;
	}
	
	
	public static boolean isIterable(java.lang.Object v, boolean isAnonym)
	{
		//line 205 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		haxe.root.Array<java.lang.String> fields = ( (isAnonym) ? (haxe.root.Reflect.fields(v)) : (haxe.root.Type.getInstanceFields(((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (v) ))) ))) );
		//line 206 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Lambda.has(((java.lang.Object) (fields) ), haxe.lang.Runtime.toString("iterator"))) ))) ) 
		{
			//line 206 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return false;
		}
		
		//line 207 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return haxe.root.Reflect.isFunction(haxe.lang.Runtime.getField(v, "iterator", false));
	}
	
	
	public static boolean isIterator(java.lang.Object v, boolean isAnonym)
	{
		//line 211 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		haxe.root.Array<java.lang.String> fields = ( (isAnonym) ? (haxe.root.Reflect.fields(v)) : (haxe.root.Type.getInstanceFields(((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (v) ))) ))) );
		//line 212 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if ((  ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Lambda.has(((java.lang.Object) (fields) ), haxe.lang.Runtime.toString("next"))) )))  ||  ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Lambda.has(((java.lang.Object) (fields) ), haxe.lang.Runtime.toString("hasNext"))) )))  )) 
		{
			//line 212 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return false;
		}
		
		//line 213 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (haxe.root.Reflect.isFunction(haxe.lang.Runtime.getField(v, "next", false))) 
		{
			//line 213 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return haxe.root.Reflect.isFunction(haxe.lang.Runtime.getField(v, "hasNext", false));
		}
		else
		{
			//line 213 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return false;
		}
		
	}
	
	
	public static boolean sameAs(java.lang.Object expected, java.lang.Object value, java.lang.Object status, double approx)
	{
		//line 217 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		java.lang.String texpected = utest.Assert.getTypeName(expected);
		//line 218 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		java.lang.String tvalue = utest.Assert.getTypeName(value);
		//line 219 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		haxe.lang.Runtime.setField(status, "expectedValue", expected);
		//line 220 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		haxe.lang.Runtime.setField(status, "actualValue", value);
		//line 222 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if ((  ! (haxe.lang.Runtime.valEq(texpected, tvalue))  &&  ! ((( ( haxe.lang.Runtime.valEq(texpected, "Int") && haxe.lang.Runtime.valEq(tvalue, "Float") ) || ( haxe.lang.Runtime.valEq(texpected, "Float") && haxe.lang.Runtime.valEq(tvalue, "Int") ) )))  )) 
		{
			//line 224 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			java.lang.String __temp_expr5 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected type " + texpected ) + " but it is " ) + tvalue ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
			//line 225 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return false;
		}
		
		//line 227 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		haxe.root.ValueType _g = haxe.root.Type.typeof(expected);
		//line 227 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		switch (_g.index)
		{
			case 1:
			case 2:
			{
				//line 230 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if ( ! (utest.Assert._floatEquals(((double) (haxe.lang.Runtime.toDouble(expected)) ), ((double) (haxe.lang.Runtime.toDouble(value)) ), approx)) ) 
				{
					//line 232 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					java.lang.String __temp_expr6 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
					//line 233 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return false;
				}
				
				//line 235 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return true;
			}
			
			
			case 0:
			case 3:
			{
				//line 237 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (( ! (haxe.lang.Runtime.eq(expected, value)) )) 
				{
					//line 238 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					java.lang.String __temp_expr7 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
					//line 239 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return false;
				}
				
				//line 241 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return true;
			}
			
			
			case 4:
			{
				//line 433 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
				{
					//line 434 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					haxe.root.Array<java.lang.String> tfields = haxe.root.Reflect.fields(value);
					//line 435 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					haxe.root.Array<java.lang.String> fields = haxe.root.Reflect.fields(expected);
					//line 436 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					java.lang.String path = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
					//line 437 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					{
						//line 437 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						int _g1 = 0;
						//line 437 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						while (( _g1 < fields.length ))
						{
							//line 437 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.String field = fields.__get(_g1);
							//line 437 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							 ++ _g1;
							//line 438 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							tfields.remove(field);
							//line 439 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.String __temp_expr8 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path, "")) ? (field) : (( ( path + "." ) + field )) )));
							//line 440 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							if ( ! (haxe.root.Reflect.hasField(value, field)) ) 
							{
								//line 441 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								java.lang.String __temp_expr9 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( "expected field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) ) + " does not exist in " ) + utest.Assert.q(value) )));
								//line 442 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								return false;
							}
							
							//line 444 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.Object e = haxe.root.Reflect.field(expected, field);
							//line 445 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							if (haxe.root.Reflect.isFunction(e)) 
							{
								//line 446 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								continue;
							}
							
							//line 447 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.Object v = haxe.root.Reflect.field(value, field);
							//line 448 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							if ( ! (utest.Assert.sameAs(e, v, status, approx)) ) 
							{
								//line 449 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								return false;
							}
							
						}
						
					}
					
					//line 451 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					if (( tfields.length > 0 )) 
					{
						//line 453 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.String __temp_expr10 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( "the tested object has extra field(s) (" + tfields.join(", ") ) + ") not included in the expected ones" )));
						//line 454 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						return false;
					}
					
				}
				
				//line 459 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (utest.Assert.isIterator(expected, true)) 
				{
					//line 460 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					if ( ! (utest.Assert.isIterator(value, true)) ) 
					{
						//line 461 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.String __temp_expr11 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( "expected Iterable but it is not " + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
						//line 462 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						return false;
					}
					
					//line 464 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
					{
						//line 465 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.Object __temp_stmt13 = null;
						//line 465 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						{
							//line 465 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							haxe.lang.Function __temp_odecl1 = new utest.Assert_sameAs_465__Fun(expected);
							//line 465 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							__temp_stmt13 = new haxe.lang.DynamicObject(new java.lang.String[]{"iterator"}, new java.lang.Object[]{__temp_odecl1}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 465 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array __temp_stmt12 = haxe.root.Lambda.array(((java.lang.Object) (__temp_stmt13) ));
						//line 465 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array evalues = ((haxe.root.Array) (__temp_stmt12) );
						//line 466 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.Object __temp_stmt15 = null;
						//line 466 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						{
							//line 466 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							haxe.lang.Function __temp_odecl2 = new utest.Assert_sameAs_466__Fun(value);
							//line 466 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							__temp_stmt15 = new haxe.lang.DynamicObject(new java.lang.String[]{"iterator"}, new java.lang.Object[]{__temp_odecl2}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 466 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array __temp_stmt14 = haxe.root.Lambda.array(((java.lang.Object) (__temp_stmt15) ));
						//line 466 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array vvalues = ((haxe.root.Array) (__temp_stmt14) );
						//line 467 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						if (( evalues.length != vvalues.length )) 
						{
							//line 468 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.String __temp_expr16 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + evalues.length ) + " values in Iterator but they are " ) + vvalues.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
							//line 469 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							return false;
						}
						
						//line 471 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.String path1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 472 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						{
							//line 472 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							int _g2 = 0;
							//line 472 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							int _g3 = evalues.length;
							//line 472 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							while (( _g2 < _g3 ))
							{
								//line 472 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								int i = _g2++;
								//line 473 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								java.lang.String __temp_expr17 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path1, "")) ? (( ( "iterator[" + i ) + "]" )) : (( ( ( path1 + "[" ) + i ) + "]" )) )));
								//line 474 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								if ( ! (utest.Assert.sameAs(evalues.__get(i), vvalues.__get(i), status, approx)) ) 
								{
									//line 476 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
									java.lang.String __temp_expr18 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(haxe.lang.Runtime.getField(status, "expectedValue", true)) ) + " but it is " ) + utest.Assert.q(haxe.lang.Runtime.getField(status, "actualValue", true)) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
									//line 477 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 481 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return true;
				}
				
				//line 485 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (utest.Assert.isIterable(expected, true)) 
				{
					//line 486 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					if ( ! (utest.Assert.isIterable(value, true)) ) 
					{
						//line 487 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.String __temp_expr19 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( "expected Iterator but it is not " + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
						//line 488 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						return false;
					}
					
					//line 490 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
					{
						//line 491 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array evalues1 = ((haxe.root.Array) (haxe.root.Lambda.array(((java.lang.Object) (expected) ))) );
						//line 492 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array vvalues1 = ((haxe.root.Array) (haxe.root.Lambda.array(((java.lang.Object) (value) ))) );
						//line 493 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						if (( evalues1.length != vvalues1.length )) 
						{
							//line 494 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.String __temp_expr20 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + evalues1.length ) + " values in Iterable but they are " ) + vvalues1.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
							//line 495 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							return false;
						}
						
						//line 497 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.String path2 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 498 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						{
							//line 498 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							int _g4 = 0;
							//line 498 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							int _g5 = evalues1.length;
							//line 498 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							while (( _g4 < _g5 ))
							{
								//line 498 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								int i1 = _g4++;
								//line 499 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								java.lang.String __temp_expr21 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path2, "")) ? (( ( "iterable[" + i1 ) + "]" )) : (( ( ( path2 + "[" ) + i1 ) + "]" )) )));
								//line 500 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								if ( ! (utest.Assert.sameAs(evalues1.__get(i1), vvalues1.__get(i1), status, approx)) ) 
								{
									//line 501 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 504 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return true;
				}
				
				//line 506 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return true;
			}
			
			
			case 5:
			{
				//line 243 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if ( ! (haxe.root.Reflect.compareMethods(expected, value)) ) 
				{
					//line 245 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					java.lang.String __temp_expr22 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( "expected same function reference" + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
					//line 246 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return false;
				}
				
				//line 248 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return true;
			}
			
			
			case 6:
			{
				//line 249 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				java.lang.Class c = ((java.lang.Class) (_g.params[0]) );
				//line 250 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				java.lang.String cexpected = haxe.root.Type.getClassName(c);
				//line 251 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				java.lang.String cvalue = haxe.root.Type.getClassName(((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (value) ))) ));
				//line 257 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if ( ! (haxe.lang.Runtime.valEq(cexpected, cvalue)) ) 
				{
					//line 259 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					java.lang.String __temp_expr23 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected instance of " + utest.Assert.q(cexpected) ) + " but it is " ) + utest.Assert.q(cvalue) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
					//line 260 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return false;
				}
				
				//line 264 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (haxe.root.Std.isOfType(expected, ((java.lang.Object) (java.lang.String.class) ))) 
				{
					//line 265 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					if (haxe.lang.Runtime.eq(expected, value)) 
					{
						//line 266 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						return true;
					}
					else
					{
						//line 268 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.String __temp_expr24 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected string \'" + haxe.root.Std.string(expected) ) + "\' but it is \'" ) + haxe.root.Std.string(value) ) + "\'" )));
						//line 269 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						return false;
					}
					
				}
				
				//line 274 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (haxe.root.Std.isOfType(expected, ((java.lang.Object) (haxe.root.Array.class) ))) 
				{
					//line 275 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
					{
						//line 276 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						if (( ! (haxe.lang.Runtime.eq(haxe.lang.Runtime.getField(expected, "length", true), haxe.lang.Runtime.getField(value, "length", true))) )) 
						{
							//line 277 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.String __temp_expr25 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + haxe.root.Std.string(haxe.lang.Runtime.getField(expected, "length", true)) ) + " elements but they are " ) + haxe.root.Std.string(haxe.lang.Runtime.getField(value, "length", true)) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
							//line 278 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							return false;
						}
						
						//line 280 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.String path3 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 281 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						{
							//line 281 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							int _g6 = 0;
							//line 281 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							int _g7 = ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(expected, "length", true))) );
							//line 281 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							while (( _g6 < _g7 ))
							{
								//line 281 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								int i2 = _g6++;
								//line 282 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								java.lang.String __temp_expr26 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path3, "")) ? (( ( "array[" + i2 ) + "]" )) : (( ( ( path3 + "[" ) + i2 ) + "]" )) )));
								//line 283 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								if ( ! (utest.Assert.sameAs(((java.lang.Object) (haxe.lang.Runtime.callField(expected, "__get", new java.lang.Object[]{i2})) ), ((java.lang.Object) (haxe.lang.Runtime.callField(value, "__get", new java.lang.Object[]{i2})) ), status, approx)) ) 
								{
									//line 285 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
									java.lang.String __temp_expr27 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( ( ( "expected array element at [" + i2 ) + "] to have " ) + utest.Assert.q(haxe.lang.Runtime.getField(status, "expectedValue", true)) ) + " but it is " ) + utest.Assert.q(haxe.lang.Runtime.getField(status, "actualValue", true)) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
									//line 286 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 290 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return true;
				}
				
				//line 294 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (haxe.root.Std.isOfType(expected, ((java.lang.Object) (haxe.root.Date.class) ))) 
				{
					//line 295 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					if (( ! (haxe.lang.Runtime.eq(((java.lang.Object) (haxe.lang.Runtime.callField(expected, "getTime", null)) ), ((java.lang.Object) (haxe.lang.Runtime.callField(value, "getTime", null)) ))) )) 
					{
						//line 296 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.String __temp_expr28 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
						//line 297 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						return false;
					}
					
					//line 299 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return true;
				}
				
				//line 303 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (haxe.root.Std.isOfType(expected, ((java.lang.Object) (haxe.io.Bytes.class) ))) 
				{
					//line 304 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
					{
						//line 305 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.io.Bytes ebytes = ((haxe.io.Bytes) (expected) );
						//line 306 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.io.Bytes vbytes = ((haxe.io.Bytes) (value) );
						//line 307 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						if (( ebytes.length != vbytes.length )) 
						{
							//line 308 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.String __temp_expr29 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( "expected " + ebytes.length ) + " bytes length but it is " ) + vbytes.length )));
							//line 309 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							return false;
						}
						
						//line 311 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						{
							//line 311 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							int _g8 = 0;
							//line 311 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							int _g9 = ebytes.length;
							//line 311 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							while (( _g8 < _g9 ))
							{
								//line 311 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								int i3 = _g8++;
								//line 312 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								if (( (( ebytes.b[i3] & 255 )) != (( vbytes.b[i3] & 255 )) )) 
								{
									//line 314 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
									java.lang.String __temp_expr30 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( ( ( "expected byte #" + i3 ) + " to be " ) + (( ebytes.b[i3] & 255 )) ) + " but it is " ) + (( vbytes.b[i3] & 255 )) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
									//line 315 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 318 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return true;
				}
				
				//line 322 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (haxe.root.Std.isOfType(expected, ((java.lang.Object) (haxe.IMap.class) ))) 
				{
					//line 323 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
					{
						//line 324 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.IMap map = ((haxe.IMap) (expected) );
						//line 325 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.IMap vmap = ((haxe.IMap) (value) );
						//line 326 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array _g10 = new haxe.root.Array(new java.lang.Object[]{});
						//line 326 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						{
							//line 326 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.Object k = map.keys();
							//line 326 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							while (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.callField(k, "hasNext", null)) )))
							{
								//line 326 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								java.lang.Object k1 = ((java.lang.Object) (haxe.lang.Runtime.callField(k, "next", null)) );
								//line 326 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								_g10.push(k1);
							}
							
						}
						
						//line 326 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array keys = _g10;
						//line 327 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array _g11 = new haxe.root.Array(new java.lang.Object[]{});
						//line 327 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						{
							//line 327 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.Object k2 = vmap.keys();
							//line 327 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							while (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.callField(k2, "hasNext", null)) )))
							{
								//line 327 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								java.lang.Object k3 = ((java.lang.Object) (haxe.lang.Runtime.callField(k2, "next", null)) );
								//line 327 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								_g11.push(k3);
							}
							
						}
						
						//line 327 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array vkeys = _g11;
						//line 329 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						if (( keys.length != vkeys.length )) 
						{
							//line 330 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.String __temp_expr31 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + keys.length ) + " keys but they are " ) + vkeys.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
							//line 331 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							return false;
						}
						
						//line 333 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.String path4 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 334 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						{
							//line 334 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							int _g12 = 0;
							//line 334 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							while (( _g12 < keys.length ))
							{
								//line 334 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								java.lang.Object key = keys.__get(_g12);
								//line 334 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								 ++ _g12;
								//line 335 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								java.lang.String __temp_expr32 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path4, "")) ? (( ( "hash[" + haxe.root.Std.string(key) ) + "]" )) : (( ( ( path4 + "[" ) + haxe.root.Std.string(key) ) + "]" )) )));
								//line 336 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								if ( ! (utest.Assert.sameAs(map.get(key), vmap.get(key), status, approx)) ) 
								{
									//line 338 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
									java.lang.String __temp_expr33 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(haxe.lang.Runtime.getField(status, "expectedValue", true)) ) + " but it is " ) + utest.Assert.q(haxe.lang.Runtime.getField(status, "actualValue", true)) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
									//line 339 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 343 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return true;
				}
				
				//line 347 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (utest.Assert.isIterator(expected, false)) 
				{
					//line 348 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
					{
						//line 349 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.Object __temp_stmt35 = null;
						//line 349 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						{
							//line 349 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							haxe.lang.Function __temp_odecl3 = new utest.Assert_sameAs_349__Fun(expected);
							//line 349 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							__temp_stmt35 = new haxe.lang.DynamicObject(new java.lang.String[]{"iterator"}, new java.lang.Object[]{__temp_odecl3}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 349 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array __temp_stmt34 = haxe.root.Lambda.array(((java.lang.Object) (__temp_stmt35) ));
						//line 349 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array evalues2 = ((haxe.root.Array) (__temp_stmt34) );
						//line 350 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.Object __temp_stmt37 = null;
						//line 350 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						{
							//line 350 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							haxe.lang.Function __temp_odecl4 = new utest.Assert_sameAs_350__Fun(value);
							//line 350 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							__temp_stmt37 = new haxe.lang.DynamicObject(new java.lang.String[]{"iterator"}, new java.lang.Object[]{__temp_odecl4}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 350 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array __temp_stmt36 = haxe.root.Lambda.array(((java.lang.Object) (__temp_stmt37) ));
						//line 350 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array vvalues2 = ((haxe.root.Array) (__temp_stmt36) );
						//line 351 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						if (( evalues2.length != vvalues2.length )) 
						{
							//line 352 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.String __temp_expr38 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + evalues2.length ) + " values in Iterator but they are " ) + vvalues2.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
							//line 353 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							return false;
						}
						
						//line 355 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.String path5 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 356 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						{
							//line 356 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							int _g13 = 0;
							//line 356 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							int _g14 = evalues2.length;
							//line 356 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							while (( _g13 < _g14 ))
							{
								//line 356 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								int i4 = _g13++;
								//line 357 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								java.lang.String __temp_expr39 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path5, "")) ? (( ( "iterator[" + i4 ) + "]" )) : (( ( ( path5 + "[" ) + i4 ) + "]" )) )));
								//line 358 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								if ( ! (utest.Assert.sameAs(evalues2.__get(i4), vvalues2.__get(i4), status, approx)) ) 
								{
									//line 360 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
									java.lang.String __temp_expr40 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(haxe.lang.Runtime.getField(status, "expectedValue", true)) ) + " but it is " ) + utest.Assert.q(haxe.lang.Runtime.getField(status, "actualValue", true)) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
									//line 361 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 365 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return true;
				}
				
				//line 369 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (utest.Assert.isIterable(expected, false)) 
				{
					//line 370 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
					{
						//line 371 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array evalues3 = ((haxe.root.Array) (haxe.root.Lambda.array(((java.lang.Object) (expected) ))) );
						//line 372 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						haxe.root.Array vvalues3 = ((haxe.root.Array) (haxe.root.Lambda.array(((java.lang.Object) (value) ))) );
						//line 373 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						if (( evalues3.length != vvalues3.length )) 
						{
							//line 374 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.String __temp_expr41 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + evalues3.length ) + " values in Iterable but they are " ) + vvalues3.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
							//line 375 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							return false;
						}
						
						//line 377 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.String path6 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 378 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						{
							//line 378 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							int _g15 = 0;
							//line 378 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							int _g16 = evalues3.length;
							//line 378 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							while (( _g15 < _g16 ))
							{
								//line 378 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								int i5 = _g15++;
								//line 379 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								java.lang.String __temp_expr42 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path6, "")) ? (( ( "iterable[" + i5 ) + "]" )) : (( ( ( path6 + "[" ) + i5 ) + "]" )) )));
								//line 380 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								if ( ! (utest.Assert.sameAs(evalues3.__get(i5), vvalues3.__get(i5), status, approx)) ) 
								{
									//line 381 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 384 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return true;
				}
				
				//line 388 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
				{
					//line 389 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					haxe.root.Array<java.lang.String> fields1 = haxe.root.Type.getInstanceFields(((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (expected) ))) ));
					//line 390 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					java.lang.String path7 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
					//line 391 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					{
						//line 391 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						int _g17 = 0;
						//line 391 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						while (( _g17 < fields1.length ))
						{
							//line 391 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.String field1 = fields1.__get(_g17);
							//line 391 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							 ++ _g17;
							//line 392 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.String __temp_expr43 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path7, "")) ? (field1) : (( ( path7 + "." ) + field1 )) )));
							//line 393 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.Object e1 = haxe.root.Reflect.field(expected, field1);
							//line 394 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							if (haxe.root.Reflect.isFunction(e1)) 
							{
								//line 394 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								continue;
							}
							
							//line 395 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.Object v1 = haxe.root.Reflect.field(value, field1);
							//line 396 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							if ( ! (utest.Assert.sameAs(e1, v1, status, approx)) ) 
							{
								//line 397 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								return false;
							}
							
						}
						
					}
					
				}
				
				//line 401 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return true;
			}
			
			
			case 7:
			{
				//line 402 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				java.lang.Class e2 = ((java.lang.Class) (_g.params[0]) );
				//line 403 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				java.lang.String eexpected = haxe.root.Type.getEnumName(e2);
				//line 404 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				java.lang.String evalue = haxe.root.Type.getEnumName(haxe.root.Type.getEnum(value));
				//line 405 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if ( ! (haxe.lang.Runtime.valEq(eexpected, evalue)) ) 
				{
					//line 407 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					java.lang.String __temp_expr44 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected enumeration of " + utest.Assert.q(eexpected) ) + " but it is " ) + utest.Assert.q(evalue) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
					//line 408 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return false;
				}
				
				//line 410 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
				{
					//line 412 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					if (( haxe.root.Type.enumIndex(expected) != haxe.root.Type.enumIndex(value) )) 
					{
						//line 414 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						java.lang.String __temp_expr45 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected enum constructor " + utest.Assert.q(haxe.root.Type.enumConstructor(expected)) ) + " but it is " ) + utest.Assert.q(haxe.root.Type.enumConstructor(value)) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) )));
						//line 415 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						return false;
					}
					
					//line 417 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					haxe.root.Array eparams = haxe.root.Type.enumParameters(expected);
					//line 418 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					haxe.root.Array vparams = haxe.root.Type.enumParameters(value);
					//line 419 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					java.lang.String path8 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
					//line 420 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					{
						//line 420 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						int _g18 = 0;
						//line 420 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						int _g19 = eparams.length;
						//line 420 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						while (( _g18 < _g19 ))
						{
							//line 420 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							int i6 = _g18++;
							//line 422 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.String __temp_expr46 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path8, "")) ? (( ( "enum[" + i6 ) + "]" )) : (( ( ( path8 + "[" ) + i6 ) + "]" )) )));
							//line 423 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							if ( ! (utest.Assert.sameAs(eparams.__get(i6), vparams.__get(i6), status, approx)) ) 
							{
								//line 425 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								java.lang.String __temp_expr47 = haxe.lang.Runtime.toString(haxe.lang.Runtime.setField(status, "error", ( ( ( ( ( ( "expected enum param " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ) + " with " ) + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "error", true)) )));
								//line 426 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								return false;
							}
							
						}
						
					}
					
				}
				
				//line 430 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return true;
			}
			
			
			case 8:
			{
				//line 508 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Unable to compare two unknown types")) );
			}
			
			
		}
		
		//line 216 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return false;
	}
	
	
	public static java.lang.String q(java.lang.Object v)
	{
		//line 515 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (haxe.root.Std.isOfType(v, ((java.lang.Object) (java.lang.String.class) ))) 
		{
			//line 516 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return ( ( "\"" + haxe.root.StringTools.replace(haxe.lang.Runtime.toString(v), "\"", "\\\"") ) + "\"" );
		}
		else
		{
			//line 518 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return haxe.root.Std.string(v);
		}
		
	}
	
	
	public static boolean same(java.lang.Object expected, java.lang.Object value, java.lang.Object recursive, java.lang.String msg, java.lang.Object approx, java.lang.Object pos)
	{
		//line 537 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (haxe.lang.Runtime.eq(null, approx)) 
		{
			//line 538 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			approx = 1e-5;
		}
		
		//line 539 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		java.lang.Object status = null;
		//line 539 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		{
			//line 540 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			java.lang.Object __temp_odecl1 = ( (haxe.lang.Runtime.eq(null, recursive)) ? (true) : (recursive) );
			//line 539 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			status = new haxe.lang.DynamicObject(new java.lang.String[]{"actualValue", "error", "expectedValue", "path", "recursive"}, new java.lang.Object[]{value, null, expected, "", __temp_odecl1}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 546 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (utest.Assert.sameAs(expected, value, status, ((double) (haxe.lang.Runtime.toDouble(approx)) ))) 
		{
			//line 547 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return utest.Assert.pass(msg, pos);
		}
		else
		{
			//line 549 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return utest.Assert.fail(( (( msg == null )) ? (haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "error", true))) : (msg) ), pos);
		}
		
	}
	
	
	public static boolean raises(haxe.lang.Function method, java.lang.Class type, java.lang.String msgNotThrown, java.lang.String msgWrongType, java.lang.Object pos)
	{
		//line 570 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		java.lang.String name = ( (( ((java.lang.Object) (type) ) != ((java.lang.Object) (null) ) )) ? (haxe.root.Type.getClassName(type)) : ("Dynamic") );
		//line 572 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		try 
		{
			//line 572 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			method.__hx_invoke0_o();
		}
		catch (java.lang.Throwable _g)
		{
			//line 1 "?"
			java.lang.Object ex = ((java.lang.Object) (haxe.Exception.caught(_g).unwrap()) );
			//line 574 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			if (( ((java.lang.Object) (null) ) == ((java.lang.Object) (type) ) )) 
			{
				//line 575 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return utest.Assert.pass(null, pos);
			}
			else
			{
				//line 577 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (( null == msgWrongType )) 
				{
					//line 578 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					msgWrongType = ( ( ( "expected throw of type " + name ) + " but it is " ) + haxe.root.Std.string(ex) );
				}
				
				//line 579 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				return utest.Assert.isTrue(haxe.root.Std.isOfType(ex, ((java.lang.Object) (type) )), msgWrongType, pos);
			}
			
		}
		
		
		//line 582 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( null == msgNotThrown )) 
		{
			//line 583 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			msgNotThrown = ( ( "exception of type " + name ) + " not raised" );
		}
		
		//line 584 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return utest.Assert.fail(msgNotThrown, pos);
	}
	
	
	public static <T> boolean allows(haxe.root.Array<T> possibilities, T value, java.lang.String msg, java.lang.Object pos)
	{
		//line 596 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Lambda.has(((java.lang.Object) (possibilities) ), ((T) (value) ))) ))) 
		{
			//line 597 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return utest.Assert.isTrue(true, msg, pos);
		}
		else
		{
			//line 599 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return utest.Assert.fail(( (( msg == null )) ? (( ( ( "value " + utest.Assert.q(value) ) + " not found in the expected possibilities " ) + haxe.root.Std.string(possibilities) )) : (msg) ), pos);
		}
		
	}
	
	
	public static <T> boolean contains(T match, haxe.root.Array<T> values, java.lang.String msg, java.lang.Object pos)
	{
		//line 612 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Lambda.has(((java.lang.Object) (values) ), ((T) (match) ))) ))) 
		{
			//line 613 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return utest.Assert.isTrue(true, msg, pos);
		}
		else
		{
			//line 615 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return utest.Assert.fail(( (( msg == null )) ? (( ( ( "values " + utest.Assert.q(values) ) + " do not contain " ) + haxe.root.Std.string(match) )) : (msg) ), pos);
		}
		
	}
	
	
	public static <T> boolean notContains(T match, haxe.root.Array<T> values, java.lang.String msg, java.lang.Object pos)
	{
		//line 628 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Lambda.has(((java.lang.Object) (values) ), ((T) (match) ))) ))) ) 
		{
			//line 629 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return utest.Assert.isTrue(true, msg, pos);
		}
		else
		{
			//line 631 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return utest.Assert.fail(( (( msg == null )) ? (( ( ( "values " + utest.Assert.q(values) ) + " do contain " ) + haxe.root.Std.string(match) )) : (msg) ), pos);
		}
		
	}
	
	
	public static boolean stringContains(java.lang.String match, java.lang.String value, java.lang.String msg, java.lang.Object pos)
	{
		//line 643 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( ( value != null ) && ( haxe.lang.StringExt.indexOf(value, match, null) >= 0 ) )) 
		{
			//line 644 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return utest.Assert.isTrue(true, msg, pos);
		}
		else
		{
			//line 646 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return utest.Assert.fail(( (( msg == null )) ? (( ( ( "value " + utest.Assert.q(value) ) + " does not contain " ) + utest.Assert.q(match) )) : (msg) ), pos);
		}
		
	}
	
	
	public static boolean stringSequence(haxe.root.Array<java.lang.String> sequence, java.lang.String value, java.lang.String msg, java.lang.Object pos)
	{
		//line 659 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( null == value )) 
		{
			//line 661 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return utest.Assert.fail(( (( msg == null )) ? ("null argument value") : (msg) ), pos);
		}
		
		//line 663 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		int p = 0;
		//line 664 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		{
			//line 664 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			int _g = 0;
			//line 664 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			while (( _g < sequence.length ))
			{
				//line 664 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				java.lang.String s = sequence.__get(_g);
				//line 664 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				 ++ _g;
				//line 666 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				int p2 = haxe.lang.StringExt.indexOf(value, s, p);
				//line 667 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				if (( p2 < 0 )) 
				{
					//line 669 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					if (( msg == null )) 
					{
						//line 671 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						msg = ( ( "expected \'" + s ) + "\' after " );
						//line 672 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
						if (( p > 0 )) 
						{
							//line 674 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							java.lang.String cut = haxe.lang.StringExt.substr(value, 0, p);
							//line 675 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							if (( cut.length() > 30 )) 
							{
								//line 676 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
								cut = ( "..." + haxe.lang.StringExt.substr(cut, -27, null) );
							}
							
							//line 677 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							msg += ( ( " \'" + cut ) + "\'" );
						}
						else
						{
							//line 679 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
							msg += " begin";
						}
						
					}
					
					//line 681 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
					return utest.Assert.fail(msg, pos);
				}
				
				//line 683 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				p = ( p2 + s.length() );
			}
			
		}
		
		//line 685 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return utest.Assert.isTrue(true, msg, pos);
	}
	
	
	public static boolean pass(java.lang.String msg, java.lang.Object pos)
	{
		//line 695 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( msg == null )) 
		{
			//line 695 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			msg = "pass expected";
		}
		
		//line 695 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return utest.Assert.isTrue(true, msg, pos);
	}
	
	
	public static boolean fail(java.lang.String msg, java.lang.Object pos)
	{
		//line 705 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		if (( msg == null )) 
		{
			//line 705 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			msg = "failure expected";
		}
		
		//line 705 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return utest.Assert.isTrue(false, msg, pos);
	}
	
	
	public static void warn(java.lang.String msg)
	{
		//line 715 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		utest.Assert.results.add(utest.Assertation.Warning(msg));
	}
	
	
	public static haxe.lang.Function createAsync;
	
	public static haxe.lang.Function createEvent;
	
	public static java.lang.String typeToString(java.lang.Object t)
	{
		//line 747 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		try 
		{
			//line 748 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			java.lang.Class _t = ((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (t) ))) );
			//line 749 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			if (( ((java.lang.Object) (_t) ) != ((java.lang.Object) (null) ) )) 
			{
				//line 750 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				t = _t;
			}
			
		}
		catch (java.lang.Throwable _g)
		{
		}
		
		
		//line 752 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		try 
		{
			//line 752 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return haxe.root.Type.getClassName(((java.lang.Class) (t) ));
		}
		catch (java.lang.Throwable _g1)
		{
		}
		
		
		//line 753 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		try 
		{
			//line 754 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			java.lang.Class _t1 = haxe.root.Type.getEnum(t);
			//line 755 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			if (( ((java.lang.Object) (_t1) ) != ((java.lang.Object) (null) ) )) 
			{
				//line 756 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
				t = _t1;
			}
			
		}
		catch (java.lang.Throwable _g2)
		{
		}
		
		
		//line 758 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		try 
		{
			//line 758 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return haxe.root.Type.getEnumName(((java.lang.Class) (t) ));
		}
		catch (java.lang.Throwable _g3)
		{
		}
		
		
		//line 759 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		try 
		{
			//line 759 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return haxe.root.Std.string(haxe.root.Type.typeof(t));
		}
		catch (java.lang.Throwable _g4)
		{
		}
		
		
		//line 760 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		try 
		{
			//line 760 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
			return haxe.root.Std.string(t);
		}
		catch (java.lang.Throwable _g5)
		{
		}
		
		
		//line 761 "/usr/local/lib/haxe/lib/utest/1,13,2/src/utest/Assert.hx"
		return "<unable to retrieve type name>";
	}
	
	
}


